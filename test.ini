; hello world string
a = 'hello world'

; additions are also allowed since it uses node.js' eval function.
[additions]
1p1 = 1 + 1
div = 20 / 2

; Two spaces is the default configuration to exit a category block.
; it recognizes categories by checking the first token in the sequence.

; The default node.js reader also tries putting it in alphabetical order, so don't get confused if your variables 
; aren't in the right places.

; It is also recommended to use a '\n' line ending
; even though this bug has already been patched, some may still experience bugs.

[test category]
helloworld = 'hello, world'

; this entire file so far compiles as
; {
;  a: 'hello world',
;  additions: { '1p1': 2, div: 10 },
;  'test category': { helloworld: 'hello, world' }
; }

; it's a lightning fast INI parser and it's flexible too.
; it was made in less than 100 lines of code, and yet it feels like it's taken years.

; you can enjoy having javascript syntax as well.

log=console.log("hello")

; it printed "hello"

; and it returns the values of the javascript functions, so you can mess around with those!

; try using math functions too!

power = Math.pow(10, 5)

; Run through this file again, it returns
; hello
; {
;  a: 'hello world',
;  additions: { '1p1': 2, div: 10 },
;  'test category': { helloworld: 'hello, world' },
;  log: undefined,
;  power: 100000
; }

; you can also nest JavaScript statements.
evaluate = var m = 1

; '1'
test = m

